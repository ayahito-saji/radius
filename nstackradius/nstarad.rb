#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require 'pp'

class NStackRadiusParser < Racc::Parser

module_eval(<<'...end nstarad.ry/module_eval...', 'nstarad.ry', 42)

def parse(str)
    scanner = StringScanner.new(str)
    @q = []
    while !scanner.eos?
        scanner.scan(/[\s\n]+/)
        scanner.scan(/phase/) ?                     @q << [:PHASE, :PHASE] :

        scanner.scan(/\".*?\"/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/\'.*?\'/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*/) ?    @q << [:IDENTIFIER, scanner.matched.to_s] :
        scanner.scan(/([0-9]*\.[0-9]+)/) ?          @q << [:NUMBER, scanner.matched.to_f] :
        scanner.scan(/(0|[1-9][0-9]*)/) ?           @q << [:NUMBER, scanner.matched.to_i] :
        scanner.scan(/./) ?                         @q << [scanner.matched, scanner.matched] :
        raise("parse error")
    end
    do_parse
end

def next_token
    @q.shift
end

def convert(tree)
    tree
end

...end nstarad.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,     7,    16,     6,    16,    14,    15,    14,    15,    14,
    15,    16,     5,    16,    19,    20,    14,    15,    14,    15,
    16,    21,    10,    13,     3,    14,    15,    19,    20,    17,
    18,    19,    20,    17,    18,    19,    20,     8 ]

racc_action_check = [
    21,     5,    17,     3,    20,    21,    21,    17,    17,    20,
    20,    19,     2,    18,    23,    23,    19,    19,    18,    18,
     9,    13,     9,     9,     1,     9,     9,    26,    26,    26,
    26,    12,    12,    12,    12,    22,    22,     7 ]

racc_action_pointer = [
   nil,    24,     6,     3,   nil,    -6,   nil,    29,   nil,    13,
   nil,   nil,    29,    10,   nil,   nil,   nil,    -5,     6,     4,
    -3,    -7,    33,    12,   nil,   nil,    25 ]

racc_action_default = [
    -2,   -16,    -1,   -16,    -3,   -16,    27,   -16,    -5,   -16,
    -4,    -6,    -7,   -16,   -13,   -14,   -15,   -16,   -16,   -16,
   -16,   -16,    -9,   -10,   -11,   -12,    -8 ]

racc_goto_table = [
    12,     1,     2,     4,     9,    11,   nil,   nil,    22,    23,
    24,    25,    26 ]

racc_goto_check = [
     6,     1,     2,     3,     4,     5,   nil,   nil,     6,     6,
     6,     6,     6 ]

racc_goto_pointer = [
   nil,     1,     2,     1,    -4,    -4,    -9 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_1,
  0, 16, :_reduce_2,
  2, 16, :_reduce_3,
  5, 17, :_reduce_4,
  0, 18, :_reduce_5,
  2, 18, :_reduce_6,
  1, 19, :_reduce_none,
  3, 19, :_reduce_8,
  3, 20, :_reduce_9,
  3, 20, :_reduce_10,
  3, 20, :_reduce_11,
  3, 20, :_reduce_12,
  1, 20, :_reduce_13,
  1, 20, :_reduce_14,
  1, 20, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 27

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "+" => 4,
  "-" => 5,
  :PHASE => 6,
  :IDENTIFIER => 7,
  "{" => 8,
  "}" => 9,
  :identifier => 10,
  "=" => 11,
  :NUMBER => 12,
  :STRING => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "PHASE",
  "IDENTIFIER",
  "\"{\"",
  "\"}\"",
  "identifier",
  "\"=\"",
  "NUMBER",
  "STRING",
  "$start",
  "program",
  "phases",
  "phase",
  "statements",
  "statement",
  "expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'nstarad.ry', 8)
  def _reduce_1(val, _values, result)
    result = [:prg, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 11)
  def _reduce_2(val, _values, result)
    result = [:phss, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 12)
  def _reduce_3(val, _values, result)
    result[1] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 15)
  def _reduce_4(val, _values, result)
    result = [:phs, val[1], val[3]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 18)
  def _reduce_5(val, _values, result)
    result = [:statements, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 19)
  def _reduce_6(val, _values, result)
    result[1] << val[1]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'nstarad.ry', 23)
  def _reduce_8(val, _values, result)
    result = [:asg_var, val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 26)
  def _reduce_9(val, _values, result)
    result = [:add, val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 27)
  def _reduce_10(val, _values, result)
    result = [:dif, val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 28)
  def _reduce_11(val, _values, result)
    result = [:mul, val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 29)
  def _reduce_12(val, _values, result)
    result = [:div, val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 30)
  def _reduce_13(val, _values, result)
    result = [:number, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 31)
  def _reduce_14(val, _values, result)
    result = [:string, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'nstarad.ry', 32)
  def _reduce_15(val, _values, result)
    result = [:ref_var, val[0]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class NStackRadiusParser


if __FILE__ == $0
    parser = NStackRadiusParser.new
    prg = gets.chomp
    pp parser.convert(parser.parse(prg))

end
