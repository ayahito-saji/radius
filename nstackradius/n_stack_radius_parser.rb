#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require 'pp'

class NStackRadiusParser < Racc::Parser

module_eval(<<'...end n_stack_radius_parser.ry/module_eval...', 'n_stack_radius_parser.ry', 46)

def parse(str)
    scanner = StringScanner.new(str)
    @q = []
    while !scanner.eos?
        scanner.scan(/[\s\n]+/)
        scanner.scan(/phase/) ?                     @q << [:PHASE, :PHASE] :

        scanner.scan(/\".*?\"/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/\'.*?\'/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*/) ?    @q << [:IDENTIFIER, scanner.matched.to_s] :
        scanner.scan(/([0-9]*\.[0-9]+)/) ?          @q << [:NUMBER, scanner.matched.to_f] :
        scanner.scan(/(0|[1-9][0-9]*)/) ?           @q << [:NUMBER, scanner.matched.to_i] :
        scanner.scan(/./) ?                         @q << [scanner.matched, scanner.matched] :
        raise("parse error")
    end
    tree = do_parse
    pp tree
    convert(tree)
end

def next_token
    @q.shift
end

def convert(tree)
    stack = [tree]
    operations = []
    while !stack.empty?
        node = stack.pop()
        #puts "NODE:#{node[0]}"
        #puts "CHILDREN:#{node[2]}"
        case node[0]
            when :phase # フェイズは特別な処理を行う
                node[2].each do |child|
                    stack.push(child)
                end
                operations.push([:phase, [convert(node[1][0])], node[2].length])

            else        # それ以外は同じ
                if node[2]
                    node[2].each do |child|
                        stack.push(child)
                    end
                    operations.push([node[0], node[1], node[2].length])
                else
                    operations.push([node[0], node[1], 0])
                end
        end
    end
    operations
end

...end n_stack_radius_parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,    20,    17,    18,    16,     8,    16,    22,    14,    15,
    14,    15,    30,    16,     6,    16,     5,    14,    15,    14,
    15,    16,     7,    10,    16,    14,    15,    16,    14,    15,
    21,    14,    15,    22,    19,    20,    17,    18,    19,    20,
    17,    18,    19,    20,    19,    20,     3 ]

racc_action_check = [
    29,    29,    29,    29,    22,     7,    21,    24,    22,    22,
    21,    21,    29,    20,     3,    19,     2,    20,    20,    19,
    19,     9,     5,     9,    18,     9,     9,    17,    18,    18,
    13,    17,    17,    13,    12,    12,    12,    12,    28,    28,
    28,    28,    23,    23,    25,    25,     1 ]

racc_action_pointer = [
   nil,    46,    10,    14,   nil,    15,   nil,    -3,   nil,    14,
   nil,   nil,    32,    20,   nil,   nil,   nil,    20,    17,     8,
     6,    -1,    -3,    40,    -6,    42,   nil,   nil,    36,    -2,
   nil ]

racc_action_default = [
    -2,   -18,    -1,   -18,    -3,   -18,    31,   -18,    -5,   -18,
    -4,    -6,    -7,   -15,   -13,   -14,   -16,   -18,   -18,   -18,
   -18,   -18,   -18,    -9,   -15,   -10,   -11,   -12,    -8,   -18,
   -17 ]

racc_goto_table = [
    12,     4,     9,    11,     2,    13,     1,   nil,    23,    25,
    26,    27,    28,    29 ]

racc_goto_check = [
     6,     3,     4,     5,     2,     7,     1,   nil,     6,     6,
     6,     6,     6,     6 ]

racc_goto_pointer = [
   nil,     6,     4,    -1,    -6,    -6,    -9,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_1,
  0, 17, :_reduce_2,
  2, 17, :_reduce_3,
  5, 18, :_reduce_4,
  0, 19, :_reduce_5,
  2, 19, :_reduce_6,
  1, 20, :_reduce_none,
  3, 20, :_reduce_8,
  3, 21, :_reduce_9,
  3, 21, :_reduce_10,
  3, 21, :_reduce_11,
  3, 21, :_reduce_12,
  1, 21, :_reduce_13,
  1, 21, :_reduce_14,
  1, 21, :_reduce_15,
  1, 22, :_reduce_16,
  4, 22, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "+" => 4,
  "-" => 5,
  :PHASE => 6,
  :IDENTIFIER => 7,
  "{" => 8,
  "}" => 9,
  "=" => 10,
  :NUMBER => 11,
  :STRING => 12,
  "[" => 13,
  "]" => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "PHASE",
  "IDENTIFIER",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "NUMBER",
  "STRING",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "phases",
  "phase",
  "statements",
  "statement",
  "expr",
  "variable_address" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 8)
  def _reduce_1(val, _values, result)
    result = [:program, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 11)
  def _reduce_2(val, _values, result)
    result = [:phases, nil, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 12)
  def _reduce_3(val, _values, result)
    result[2] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 15)
  def _reduce_4(val, _values, result)
    result = [:phase, [val[3]], [[:identifier, [val[1]], nil]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 18)
  def _reduce_5(val, _values, result)
    result = [:statements, nil, []]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 19)
  def _reduce_6(val, _values, result)
    result[2] << val[1]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 23)
  def _reduce_8(val, _values, result)
    result = [:assign_variable, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 26)
  def _reduce_9(val, _values, result)
    result = [:add, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 27)
  def _reduce_10(val, _values, result)
    result = [:dif, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 28)
  def _reduce_11(val, _values, result)
    result = [:mul, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 29)
  def _reduce_12(val, _values, result)
    result = [:div, nil, [val[0], val[2]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 30)
  def _reduce_13(val, _values, result)
    result = [:number, [val[0]], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 31)
  def _reduce_14(val, _values, result)
    result = [:string, [val[0]], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 32)
  def _reduce_15(val, _values, result)
    result = [:reference_variable, nil, [val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 35)
  def _reduce_16(val, _values, result)
    result = [:identifier, [val[0]], nil]
    result
  end
.,.,

module_eval(<<'.,.,', 'n_stack_radius_parser.ry', 36)
  def _reduce_17(val, _values, result)
    result = [:index, nil, [val[0], val[2]]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class NStackRadiusParser


if __FILE__ == $0
    parser = NStackRadiusParser.new
    prg = ""
    File.open("program.rlb", "r") do |f|
        prg = f.read.chomp
    end
    pp parser.parse(prg)

end
