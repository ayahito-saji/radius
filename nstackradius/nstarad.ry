class NStackRadiusParser
  prechigh
    left '*' '/'
    left '+' '-'
  preclow

  rule
    program
        : phases                                                            {result = [:prg, val[0]]}

    phases
        :                                                                   {result = [:phss, []]}
        | phases phase                                                      {result[1] << val[1]}

    phase
        : PHASE IDENTIFIER '{' statements '}'                               {result = [:phs, val[1], val[3]]}

    statements
        :                                                                   {result = [:statements, []]}
        | statements statement                                              {result[1] << val[1]}

    statement
        : expr
        | identifier '=' expr                                               {result = [:asg_var, val[0], val[2]]}

    expr
        : expr '+' expr                                                     {result = [:add, val[0], val[2]]}
        | expr '-' expr                                                     {result = [:dif, val[0], val[2]]}
        | expr '*' expr                                                     {result = [:mul, val[0], val[2]]}
        | expr '/' expr                                                     {result = [:div, val[0], val[2]]}
        | NUMBER                                                            {result = [:number, val[0]]}
        | STRING                                                            {result = [:string, val[0]]}
        | IDENTIFIER                                                        {result = [:ref_var, val[0]]}
end

---- header

require 'strscan'
require 'pp'

---- inner

def parse(str)
    scanner = StringScanner.new(str)
    @q = []
    while !scanner.eos?
        scanner.scan(/[\s\n]+/)
        scanner.scan(/phase/) ?                     @q << [:PHASE, :PHASE] :

        scanner.scan(/\".*?\"/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/\'.*?\'/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
        scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*/) ?    @q << [:IDENTIFIER, scanner.matched.to_s] :
        scanner.scan(/([0-9]*\.[0-9]+)/) ?          @q << [:NUMBER, scanner.matched.to_f] :
        scanner.scan(/(0|[1-9][0-9]*)/) ?           @q << [:NUMBER, scanner.matched.to_i] :
        scanner.scan(/./) ?                         @q << [scanner.matched, scanner.matched] :
        raise("parse error")
    end
    do_parse
end

def next_token
    @q.shift
end

def convert(tree)
    tree
end

---- footer

if __FILE__ == $0
    parser = NStackRadiusParser.new
    prg = gets.chomp
    pp parser.convert(parser.parse(prg))

end