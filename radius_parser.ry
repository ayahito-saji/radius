class RadiusParser
  prechigh
  left '*' '/' '%'
  left '+' '-'
  nonassoc '==' '!=' '>' '>=' '<' '<='
  nonassoc '=' '+=' '-=' '*=' '/=' '%='
  preclow

  rule
    stmts       :                                               {result = ['STMTS']}
                | stmts stmt                                    {result << val[1]}

    stmt        : expr ';'
                | var_assign ';'
                | if_stmt
                | loop_stmt
                | BREAK ';'                                     {result = ['BREAK']}
                | RETURN expr ';'                               {result = ['RETURN', val[1]]}
                | identifier '=' func                           {result = ['=', val[0], val[2]]}

    var_assign  : identifier '=' expr                           {result = ['=', val[0], val[2]]}
                | identifier '+=' expr                          {result = ['+=', val[0], val[2]]}
                | identifier '-=' expr                          {result = ['-=', val[0], val[2]]}
                | identifier '*=' expr                          {result = ['*=', val[0], val[2]]}
                | identifier '/=' expr                          {result = ['/=', val[0], val[2]]}
                | identifier '%=' expr                          {result = ['%=', val[0], val[2]]}

    if_stmt     : IF '(' expr ')' '{' stmts '}' else_stmt       {result = ['IF', val[2], val[5], val[7]]}
                | IF '(' expr ')' stmt else_stmt                {result = ['IF', val[2], val[4], val[5]]}

    else_stmt   :
                | ELSE '{' stmts '}'                            {result = val[2]}
                | ELSE stmt                                     {result = val[1]}

    loop_stmt   : LOOP '{' stmts '}'                            {result = ['LOOP', val[2]]}

    expr        : expr '+' expr                                 {result = ['+', val[0], val[2]]}
                | expr '-' expr                                 {result = ['-', val[0], val[2]]}
                | '-' expr                                      {result = ['-', ["NUMBER", 0], val[1]]}
                | expr '*' expr                                 {result = ['*', val[0], val[2]]}
                | expr '/' expr                                 {result = ['/', val[0], val[2]]}
                | expr '%' expr                                 {result = ['%', val[0], val[2]]}
                | expr '==' expr                                {result = ['==', val[0], val[2]]}
                | expr '!=' expr                                {result = ['!=', val[0], val[2]]}
                | expr '>' expr                                 {result = ['>', val[0], val[2]]}
                | expr '>=' expr                                {result = ['>=', val[0], val[2]]}
                | expr '<' expr                                 {result = ['<', val[0], val[2]]}
                | expr '<=' expr                                {result = ['<=', val[0], val[2]]}
                | primary

    primary     : '(' expr ')'                                  {result = val[1]}
                | lit
                | func_call

    func_call   : identifier '(' list ')'                       {result = ['FUNC_CALL', val[0], val[2]]}
                | func '(' list ')'                             {result = ['FUNC_CALL', val[0], val[2]]}


    list        :                                               {result = []}
                | expr                                          {result = [val[0]]}
                | list ',' expr                                 {result << val[2]}

    lit         : NUMBER                                        {result = ['NUMBER', val[0]]}
                | identifier
                | STRING                                        {result = ['STRING', val[0]]}
                | BOOLEAN                                       {result = ['BOOLEAN', val[0]]}

    func        : '(' list ')' '{' stmts '}'                    {result = ['FUNCTION', val[1], val[4]]}

    identifier  : IDENTIFIER                                    {result = ['IDENTIFIER', val[0]]}
end

---- header
require 'pp'
require 'strscan'

---- inner

def parse(str)
  scanner = StringScanner.new(str)
  @q = []
  while !scanner.eos?
    scanner.scan(/[\s\n]+/)

    scanner.scan(/if/) ?                        @q << [:IF, "if"] :
    scanner.scan(/else/) ?                      @q << [:ELSE, "else"] :
    scanner.scan(/loop/) ?                      @q << [:LOOP, "loop"] :
    scanner.scan(/break/) ?                     @q << [:BREAK, "break"] :
    scanner.scan(/return/) ?                     @q << [:RETURN, "return"] :

    scanner.scan(/true|false/) ?                @q << [:BOOLEAN, scanner.matched] :
    scanner.scan(/\".*?\"/) ?                   @q << [:STRING, scanner.matched[1..-2]] :
    scanner.scan(/[a-zA-Z_][a-zA-Z0-9_]*/) ?    @q << [:IDENTIFIER, scanner.matched] :
    scanner.scan(/(0|[0-9]*\.[0-9]+|[1-9][0-9]*)/) ?   @q << [:NUMBER, scanner.matched.to_f] :

    scanner.scan(/\+=/) ?                       @q << ["+=", "+="] :
    scanner.scan(/-=/) ?                        @q << ["-=", "-="] :
    scanner.scan(/\*=/) ?                       @q << ["*=", "*="] :
    scanner.scan(/\/=/) ?                       @q << ["/=", "/="] :

    scanner.scan(/==/) ?                        @q << ["==", "=="] :
    scanner.scan(/!=/) ?                        @q << ["!=", "!="] :
    scanner.scan(/>=/) ?                        @q << [">=", ">="] :
    scanner.scan(/<=/) ?                        @q << ["<=", "<="] :
    scanner.scan(/>/) ?                         @q << [">", ">"] :
    scanner.scan(/</) ?                         @q << ["<", "<"] :

    scanner.scan(/./) ?                         @q << [scanner.matched, scanner.matched] :
    (raise "scanner error")
  end
  puts ("Token: #{@q}")

  do_parse
end

def next_token
  @q.shift
end

---- footer
if __FILE__ == $0
  parser = RadiusParser.new
  File.open("program.rlb", "r") do |f|
    res = parser.parse(f.read)
    puts ("Parse: #{res}")
  end
end