
'''
      when :VARIABLE # 関数呼出
        if tree[1] # オブジェクトに付属する関数呼び出し
          obj = evaluate(tree[1], current_env, current_instance)
          case obj[0]
            # クラスの関数を呼び出す
            when :CLASS
              if tree[2][1] == :new
                function = obj[2][:init]
                new_instance = [:INSTANCE, obj, {}]
                func_call(function, tree[3], current_env, new_instance) if function
                return new_instance
              else
                function = obj[2][tree[2][1]]
              end
            # インスタンスの関数を呼び出す
            when :INSTANCE
              case obj[1]
                when :NUMBER
                  puts("this is number")
                when :BOOLEAN
                  puts("this is boolean")
                when :STRING
                  puts("this is string")
                else
                  function = obj[1][2][tree[2][1]]
                  current_instance = obj
              end
          end
        elsif tree[2][0] == :IDENTIFIER # 関数呼び出し
          case tree[2][1]
            # 組み込み関数の実行
            when :print
              obj = evaluate(tree[3][0], current_env, current_instance)
              if obj[0]==:INSTANCE && (obj[1]==:NUMBER || obj[1]==:STRING || obj[1]==:BOOLEAN)
                puts(obj[3])
              else
                p obj
              end
              return
            # 有名関数呼び出し
            else
              function = current_env[tree[2][1]]
          end
        elsif tree[2][0] == :FUNCTION # 無名関数呼び出し
          function = tree[2]
        end
        func_call(function, tree[3], current_env, current_instance)


      when :VARIABLE # 変数定義
        if tree[1]
          obj = evaluate(tree[1], current_env, current_instance)
          case obj[0]
            when :CLASS
              new_env = obj[2]
              new_obj = new_env[tree[2][1]]
              raise("#{tree[2][1].to_s} is undefined class") if new_obj.nil?
              return new_obj
            when :INSTANCE
              new_env = obj[2]
              new_obj = new_env[tree[2][1]]
              raise("#{tree[2][1].to_s} is undefined object") if new_obj.nil?
              return new_obj
          end
        else
          obj = current_env[tree[2][1]]
          raise("#{tree[2][1].to_s} is undefined object") if obj.nil?
          return obj
        end
  '''